{"version":3,"file":"background.js","mappingssources":["webpack:///./src/background/background.ts"],"sourcesContent":["\"use strict\";\n// background.ts (MV3 service worker)\nchrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {\n    if (msg.cmd === 'RUN_IN_PAGE') {\n        console.log('Received RUN_IN_PAGE command with data:', msg.data);\n        const tabId = sender.tab?.id;\n        if (!tabId) {\n            sendResponse({ ok: false, error: 'No tab id' });\n            return;\n        }\n        chrome.scripting.executeScript({\n            target: { tabId },\n            func: (payload) => {\n                // --- code chạy TRONG page context ---\n                function toDDMMYYYY(d) {\n                    const dd = String(d.getDate()).padStart(2, '0');\n                    const mm = String(d.getMonth() + 1).padStart(2, '0');\n                    const yyyy = d.getFullYear();\n                    return `${dd}/${mm}/${yyyy}`;\n                }\n                function normalize(v) {\n                    // nếu truyền dd/mm/yyyy -> trả nguyên\n                    if (typeof v !== 'string')\n                        return v;\n                    if (v.includes('/'))\n                        return v;\n                    // try ISO yyyy-mm-dd\n                    const parsed = new Date(v);\n                    if (!isNaN(parsed.getTime()))\n                        return toDDMMYYYY(parsed);\n                    return v;\n                }\n                try {\n                    const data = payload;\n                    const ngay = normalize(data.NgaySinh);\n                    // 1) Nếu bootstrap-datepicker (jQuery) tồn tại -> dùng API\n                    try {\n                        if (window.$ && window.$.fn && window.$.fn.datepicker) {\n                            const $ = window.$;\n                            const picker = $('.datepicker-NgaySinh');\n                            console.log('[EXT] Found bootstrap datepicker for #NgaySinh:', picker);\n                            if (picker && picker.length) {\n                                picker.datepicker('update', ngay);\n                            }\n                            else {\n                                // fallback: set trên input trực tiếp\n                                const input = document.querySelector('#NgaySinh');\n                                if (input) {\n                                    const setter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value')?.set;\n                                    if (setter)\n                                        setter.call(input, ngay);\n                                    else\n                                        input.value = ngay;\n                                    input.dispatchEvent(new Event('input', { bubbles: true }));\n                                    input.dispatchEvent(new Event('change', { bubbles: true }));\n                                }\n                            }\n                        }\n                        else {\n                            // 2) Try flatpickr instance\n                            const input = document.querySelector('#NgaySinh');\n                            if (input && input._flatpickr) {\n                                input._flatpickr.setDate(ngay, true);\n                            }\n                            else if (input) {\n                                // 3) fallback native + dispatch (this runs in page context so React listeners see it)\n                                const setter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value')?.set;\n                                if (setter)\n                                    setter.call(input, ngay);\n                                else\n                                    input.value = ngay;\n                                input.dispatchEvent(new Event('input', { bubbles: true }));\n                                input.dispatchEvent(new Event('change', { bubbles: true }));\n                            }\n                            else {\n                                console.warn('[EXT] #NgaySinh input not found');\n                            }\n                        }\n                        // Cập nhật họ tên, mã nếu cần (tương tự)\n                        const nameInput = document.querySelector('#HoTen');\n                        if (nameInput && data.Name) {\n                            const setter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value')?.set;\n                            if (setter)\n                                setter.call(nameInput, data.Name);\n                            else\n                                nameInput.value = data.Name;\n                            nameInput.dispatchEvent(new Event('input', { bubbles: true }));\n                            nameInput.dispatchEvent(new Event('change', { bubbles: true }));\n                        }\n                        // Id vào MaHoSo hoặc MaBuuGui\n                        const idInput = document.querySelector('#MaHoSo') || document.querySelector('#MaBuuGui');\n                        if (idInput && data.Id) {\n                            const setter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value')?.set;\n                            if (setter)\n                                setter.call(idInput, data.Id);\n                            else\n                                idInput.value = data.Id;\n                            idInput.dispatchEvent(new Event('input', { bubbles: true }));\n                            idInput.dispatchEvent(new Event('change', { bubbles: true }));\n                        }\n                        // done\n                    }\n                    catch (e) {\n                        console.error('[EXT] Error updating fields', e);\n                    }\n                }\n                catch (err) {\n                    console.error('payload error', err);\n                }\n            },\n            args: [msg.data]\n        }).then(() => {\n            sendResponse({ ok: true });\n        }).catch((err) => {\n            console.error('executeScript failed', err);\n            sendResponse({ ok: false, error: String(err) });\n        });\n        return true; // async\n    }\n});\n"],"names":[],"sourceRoot":""}