{"version":3,"file":"contentScript.js","mappingssources":["webpack:///./src/contentScript/contentScript.tsx"],"sourcesContent":["\"use strict\";\nwindow.onload = () => {\n    console.log(\"Chạy contentScript\");\n    const hoTenInput = document.querySelector(\"#HoTen\");\n    const textTen = hoTenInput?.value;\n    if (!textTen) {\n        chrome.runtime.sendMessage({ message: \"finded\" });\n    }\n    else {\n        //thay vi handleInput thi send luon\n        // chrome.runtime.sendMessage({ message: \"finded\", ten: textTen });\n        handleExistingInput();\n    }\n};\n// Tạo promise để chờ text \"Không tìm khách hàng\" xuất hiện\nconst waitForNoCustomerText = new Promise((resolve) => {\n    const checkText = () => {\n        // Lấy text từ xpath /html/body/div[1]/text()\n        const bodyDiv = document.evaluate('/html/body/div[1]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n        if (bodyDiv) {\n            const textContent = bodyDiv.textContent || '';\n            if (textContent.includes(\"Không tìm khách hàng\")) {\n                resolve(textContent);\n                return true;\n            }\n        }\n        return false;\n    };\n    // Kiểm tra ngay lập tức\n    if (checkText())\n        return;\n    // Nếu chưa có, sử dụng MutationObserver để theo dõi\n    const observer = new MutationObserver(() => {\n        if (checkText()) {\n            observer.disconnect();\n        }\n    });\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        characterData: true\n    });\n});\nasync function handleExistingInput() {\n    // Tạo promise để chờ button xuất hiện\n    const waitForButton = waitForElm(\"#Result > tbody > tr:nth-child(1) > td:nth-child(8) > button\");\n    // Chờ cái nào xuất hiện trước\n    const result = await Promise.race([\n        waitForButton.then(button => ({ type: 'button', data: button })),\n        waitForNoCustomerText.then(text => ({ type: 'noCustomer', data: text }))\n    ]);\n    if (result.type === 'button') {\n        // Nếu button xuất hiện trước\n        const buttonList = document.querySelectorAll(\"#Result > tbody > tr > td:nth-child(8) > button\");\n        if (buttonList.length === 1 && result.data) {\n            result.data.click();\n            console.log(\"Đã tìm thấy onload\");\n        }\n    }\n    else if (result.type === 'noCustomer') {\n        // Nếu text \"Không tìm khách hàng\" xuất hiện trước\n        console.log(\"Không tìm thấy nút submit, và không tìm thấy cccd người này\");\n        const hoTenInput = document.querySelector(\"#HoTen\");\n        const textTen = hoTenInput?.value;\n        chrome.runtime.sendMessage({ message: \"not_found\", name: textTen });\n    }\n}\nchrome.runtime.onMessage.addListener((msg) => {\n    console.log(\"Đã nhận được tin nhắn tới contentScript\");\n    if (msg?.message === \"ADDCCCD\") {\n        updateInputFields(msg.data);\n    }\n});\nfunction updateInputFields(data) {\n    const hoTenInput = document.querySelector(\"#HoTen\");\n    const ngaySinhInput = document.querySelector(\"#NgaySinh\");\n    const submitButton = document.querySelector(\"#submit\");\n    const event = new Event(\"input\", { bubbles: true });\n    hoTenInput.value = data.Name;\n    hoTenInput.dispatchEvent(event);\n    ngaySinhInput.value = data.NgaySinh;\n    ngaySinhInput.dispatchEvent(event);\n    submitButton?.click();\n}\nfunction waitForElm(selector) {\n    return new Promise((resolve) => {\n        const element = document.querySelector(selector);\n        if (element) {\n            return resolve(element);\n        }\n        const observer = new MutationObserver(() => {\n            const element = document.querySelector(selector);\n            if (element) {\n                observer.disconnect();\n                resolve(element);\n            }\n        });\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    });\n}\n"],"names":[],"sourceRoot":""}