{"version":3,"file":"contentScript.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./src/contentScript/contentScript.tsx"],"sourcesContent":["\"use strict\";\nwindow.onload = () => {\n    console.log(\"Chạy contentScript\");\n    const hoTenInput = document.querySelector(\"#HoTen\");\n    const textTen = hoTenInput?.value;\n    if (!textTen) {\n        chrome.runtime.sendMessage({ message: \"finded\" });\n    }\n    else {\n        //thay vi handleInput thi send luon\n        // chrome.runtime.sendMessage({ message: \"finded\", ten: textTen });\n        handleExistingInput();\n    }\n};\nasync function handleExistingInput() {\n    const button = await waitForElm(\"#Result > tbody > tr:nth-child(1) > td:nth-child(8) > button\");\n    const buttonList = document.querySelectorAll(\"#Result > tbody > tr > td:nth-child(8) > button\");\n    if (buttonList.length === 1 && button) {\n        button.click();\n        console.log(\"Đã tìm thấy onload\");\n    }\n}\nchrome.runtime.onMessage.addListener((msg) => {\n    console.log(\"Đã nhận được tin nhắn tới contentScript\");\n    if (msg?.message === \"ADDCCCD\") {\n        updateInputFields(msg.data);\n    }\n});\nfunction updateInputFields(data) {\n    const hoTenInput = document.querySelector(\"#HoTen\");\n    const ngaySinhInput = document.querySelector(\"#NgaySinh\");\n    const submitButton = document.querySelector(\"#submit\");\n    const event = new Event(\"input\", { bubbles: true });\n    hoTenInput.value = data.Name;\n    hoTenInput.dispatchEvent(event);\n    ngaySinhInput.value = data.NgaySinh;\n    ngaySinhInput.dispatchEvent(event);\n    submitButton?.click();\n}\nfunction waitForElm(selector) {\n    return new Promise((resolve) => {\n        const element = document.querySelector(selector);\n        if (element) {\n            return resolve(element);\n        }\n        const observer = new MutationObserver(() => {\n            const element = document.querySelector(selector);\n            if (element) {\n                observer.disconnect();\n                resolve(element);\n            }\n        });\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    });\n}\n"],"names":[],"sourceRoot":""}