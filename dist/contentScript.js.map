{"version":3,"file":"contentScript.js","mappingssources":["webpack:///./src/contentScript/contentScript.tsx"],"sourcesContent":["\"use strict\";\nwindow.onload = () => {\n    console.log(\"Chạy contentScript CCCDHCC\");\n    const hoTenInput = document.querySelector(\"#HoTen\");\n    const textTen = hoTenInput?.value;\n    if (!textTen) {\n        chrome.runtime.sendMessage({ message: \"finded\" });\n    }\n    else {\n        //thay vi handleInput thi send luon\n        // chrome.runtime.sendMessage({ message: \"finded\", ten: textTen });\n        handleExistingInput();\n    }\n};\n// Tạo promise để chờ text \"Không tìm khách hàng\" xuất hiện\nconst waitForNoCustomerText = new Promise((resolve) => {\n    const checkText = () => {\n        // Lấy text từ xpath /html/body/div[1]/text()\n        const bodyDiv = document.evaluate('/html/body/div[1]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n        if (bodyDiv) {\n            const textContent = bodyDiv.textContent || '';\n            if (textContent.includes(\"Không tìm khách hàng\")) {\n                resolve(textContent);\n                return true;\n            }\n        }\n        return false;\n    };\n    // Kiểm tra ngay lập tức\n    if (checkText())\n        return;\n    // Nếu chưa có, sử dụng MutationObserver để theo dõi\n    const observer = new MutationObserver(() => {\n        if (checkText()) {\n            observer.disconnect();\n        }\n    });\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        characterData: true\n    });\n});\nasync function handleExistingInput() {\n    // Tạo promise để chờ button xuất hiện\n    const waitForButton = waitForElm(\"#Result > tbody > tr:nth-child(1) > td:nth-child(8) > button\");\n    // Chờ cái nào xuất hiện trước\n    const result = await Promise.race([\n        waitForButton.then(button => ({ type: 'button', data: button })),\n        waitForNoCustomerText.then(text => ({ type: 'noCustomer', data: text }))\n    ]);\n    if (result.type === 'button') {\n        // Nếu button xuất hiện trước\n        const buttonList = document.querySelectorAll(\"#Result > tbody > tr > td:nth-child(8) > button\");\n        if (buttonList.length === 1 && result.data) {\n            result.data.click();\n            console.log(\"Đã tìm thấy onload\");\n        }\n    }\n    else if (result.type === 'noCustomer') {\n        // Nếu text \"Không tìm khách hàng\" xuất hiện trước\n        console.log(\"Không tìm thấy nút submit, và không tìm thấy cccd người này\");\n        const hoTenInput = document.querySelector(\"#HoTen\");\n        const textTen = hoTenInput?.value;\n        chrome.runtime.sendMessage({ message: \"not_found\", name: textTen });\n    }\n}\n// Ví dụ: set ngày 21/10/2025\nlet injectedReady = false;\nlet pendingNgaySinhData = null;\nlet pendingFallbackTimer = null;\nconst FALLBACK_SEND_MS = 1500; // if injected doesn't respond, send anyway after this\n// Listen for messages from the page (injected script) via window.postMessage\nwindow.addEventListener(\"message\", (event) => {\n    // Only accept messages from same window\n    if (event.source !== window)\n        return;\n    const data = event.data;\n    if (!data || typeof data !== \"object\")\n        return;\n    if (data.type === \"INJECTED_READY\") {\n        injectedReady = true;\n        console.log(\"✅ Received INJECTED_READY from page\");\n        // If we have pending data, send it now\n        if (pendingNgaySinhData) {\n            window.postMessage({ type: \"SET_NGAY_SINH\", payload: pendingNgaySinhData }, \"*\");\n            // clear pending and fallback\n            pendingNgaySinhData = null;\n            if (pendingFallbackTimer) {\n                clearTimeout(pendingFallbackTimer);\n                pendingFallbackTimer = null;\n            }\n        }\n    }\n    if (data.type === \"NGAY_SINH_UPDATED\") {\n        console.log(\"✅ Ngày sinh đã được cập nhật (message from page)!\");\n        const button = document.querySelector(\"#layout-wrapper > div > div > div > div > div:nth-child(3) > form > div.row.row-cols-4 > div.col-12.mb-3 > div > button\");\n        // small delay to allow UI to settle\n        setTimeout(() => button?.click(), 100);\n    }\n});\nchrome.runtime.onMessage.addListener((msg) => {\n    console.log(\"Đã nhận được tin nhắn tới contentScript\");\n    if (msg?.message === \"ADDCCCD\") {\n        // Nếu injected chưa ready thì đợi\n        if (!injectedReady) {\n            console.log(\"⏳ Chờ injected script khởi tạo...\");\n            updateInputFields(msg.data);\n        }\n        else {\n            updateInputFields(msg.data);\n        }\n    }\n    if (msg.data.type === \"INJECTED_READY\") {\n        injectedReady = true;\n        console.log(\"✅ Injected script is ready\");\n    }\n    else if (msg.data.type === \"NGAY_SINH_UPDATED\") {\n        console.log(\"✅ Ngày sinh đã được cập nhật!\");\n        // ✅ Click nút submit\n        const button = document.querySelector(\"#layout-wrapper > div > div > div > div > div:nth-child(3) > form > div.row.row-cols-4 > div.col-12.mb-3 > div > button\");\n        button?.click();\n    }\n});\nfunction updateInputFields(data) {\n    try {\n        // ✅ Cập nhật họ tên\n        // Inject script file vào page context\n        if (!document.getElementById(\"injected-script\")) {\n            const script = document.createElement(\"script\");\n            script.id = \"injected-script\";\n            script.src = chrome.runtime.getURL(\"injected.js\");\n            // script.onload = () => script.remove(); // dọn sạch thẻ sau khi nạp\n            (document.head || document.documentElement).appendChild(script);\n            console.log(\"✅ injected.js đã được chèn\");\n            const nameInput = document.querySelector(\"#HoTen\");\n            if (nameInput) {\n                nameInput.value = data.Name || \"\";\n                nameInput.dispatchEvent(new Event(\"input\", { bubbles: true }));\n                nameInput.dispatchEvent(new Event(\"change\", { bubbles: true }));\n            }\n            // Instead of waiting a fixed timeout, queue the data and wait for the injected\n            // script to notify readiness via window.postMessage({ type: 'INJECTED_READY' }).\n            pendingNgaySinhData = data;\n            // Fallback: if injected doesn't respond, send after FALLBACK_SEND_MS\n            if (pendingFallbackTimer) {\n                clearTimeout(pendingFallbackTimer);\n            }\n            pendingFallbackTimer = window.setTimeout(() => {\n                if (pendingNgaySinhData) {\n                    console.warn(\"⚠️ injected did not signal readiness — sending SET_NGAY_SINH as fallback\");\n                    window.postMessage({ type: \"SET_NGAY_SINH\", payload: pendingNgaySinhData }, \"*\");\n                    pendingNgaySinhData = null;\n                    pendingFallbackTimer = null;\n                }\n            }, FALLBACK_SEND_MS);\n            // Gửi data sang page context qua window.postMessage\n        }\n        else {\n            console.log(\"⚠️ injected.js đã tồn tại, bỏ qua inject lại\");\n            const nameInput = document.querySelector(\"#HoTen\");\n            if (nameInput) {\n                nameInput.value = data.Name || \"\";\n                nameInput.dispatchEvent(new Event(\"input\", { bubbles: true }));\n                nameInput.dispatchEvent(new Event(\"change\", { bubbles: true }));\n            }\n            // If injected is already ready, send immediately. Otherwise queue and wait (see above listener).\n            if (injectedReady) {\n                window.postMessage({ type: \"SET_NGAY_SINH\", payload: data }, \"*\");\n            }\n            else {\n                pendingNgaySinhData = data;\n                if (pendingFallbackTimer) {\n                    clearTimeout(pendingFallbackTimer);\n                }\n                pendingFallbackTimer = window.setTimeout(() => {\n                    if (pendingNgaySinhData) {\n                        console.warn(\"⚠️ injected did not signal readiness — sending SET_NGAY_SINH as fallback\");\n                        window.postMessage({ type: \"SET_NGAY_SINH\", payload: pendingNgaySinhData }, \"*\");\n                        pendingNgaySinhData = null;\n                        pendingFallbackTimer = null;\n                    }\n                }, FALLBACK_SEND_MS);\n            }\n        }\n    }\n    catch (err) {\n        console.error(\"[EXT] Lỗi khi cập nhật form:\", err);\n    }\n}\nfunction waitForElm(selector) {\n    return new Promise((resolve) => {\n        const element = document.querySelector(selector);\n        if (element) {\n            return resolve(element);\n        }\n        const observer = new MutationObserver(() => {\n            const element = document.querySelector(selector);\n            if (element) {\n                observer.disconnect();\n                resolve(element);\n            }\n        });\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    });\n}\n"],"names":[],"sourceRoot":""}